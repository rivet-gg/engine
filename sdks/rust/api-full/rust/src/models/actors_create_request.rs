/*
 * rivet-api-public
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.7.0
 * Contact: developer@rivet.gg
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActorsCreateRequest {
    #[serde(rename = "crash_policy")]
    pub crash_policy: models::CrashPolicy,
    #[serde(rename = "input", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub input: Option<Option<String>>,
    #[serde(rename = "key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub key: Option<Option<String>>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "runner_name_selector")]
    pub runner_name_selector: String,
}

impl ActorsCreateRequest {
    pub fn new(crash_policy: models::CrashPolicy, name: String, runner_name_selector: String) -> ActorsCreateRequest {
        ActorsCreateRequest {
            crash_policy,
            input: None,
            key: None,
            name,
            runner_name_selector,
        }
    }
}

